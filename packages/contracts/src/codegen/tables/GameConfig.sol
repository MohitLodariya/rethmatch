// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GameConfigData {
  uint64 lineJumpDecayFactor;
  uint96 velocityCoefficient;
  uint96 minFoodMass;
  uint96 maxFoodMass;
  uint96 wallMass;
  uint96 playerStartingMass;
  uint128 lineWidth;
  uint128 consumableSpawnGap;
  uint96 powerPelletEffectTime;
  uint32 powerPelletSpawnOdds;
  uint8 highScoreTopK;
  address accessSigner;
}

library GameConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "GameConfig", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000047616d65436f6e666967000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00890c00080c0c0c0c0c10100c04011400000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint64, uint96, uint96, uint96, uint96, uint96, uint128, uint128, uint96, uint32, uint8, address)
  Schema constant _valueSchema = Schema.wrap(0x00890c00070b0b0b0b0b0f0f0b03006100000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](12);
    fieldNames[0] = "lineJumpDecayFactor";
    fieldNames[1] = "velocityCoefficient";
    fieldNames[2] = "minFoodMass";
    fieldNames[3] = "maxFoodMass";
    fieldNames[4] = "wallMass";
    fieldNames[5] = "playerStartingMass";
    fieldNames[6] = "lineWidth";
    fieldNames[7] = "consumableSpawnGap";
    fieldNames[8] = "powerPelletEffectTime";
    fieldNames[9] = "powerPelletSpawnOdds";
    fieldNames[10] = "highScoreTopK";
    fieldNames[11] = "accessSigner";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get lineJumpDecayFactor.
   */
  function getLineJumpDecayFactor() internal view returns (uint64 lineJumpDecayFactor) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get lineJumpDecayFactor.
   */
  function _getLineJumpDecayFactor() internal view returns (uint64 lineJumpDecayFactor) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set lineJumpDecayFactor.
   */
  function setLineJumpDecayFactor(uint64 lineJumpDecayFactor) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((lineJumpDecayFactor)), _fieldLayout);
  }

  /**
   * @notice Set lineJumpDecayFactor.
   */
  function _setLineJumpDecayFactor(uint64 lineJumpDecayFactor) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((lineJumpDecayFactor)), _fieldLayout);
  }

  /**
   * @notice Get velocityCoefficient.
   */
  function getVelocityCoefficient() internal view returns (uint96 velocityCoefficient) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get velocityCoefficient.
   */
  function _getVelocityCoefficient() internal view returns (uint96 velocityCoefficient) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set velocityCoefficient.
   */
  function setVelocityCoefficient(uint96 velocityCoefficient) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((velocityCoefficient)), _fieldLayout);
  }

  /**
   * @notice Set velocityCoefficient.
   */
  function _setVelocityCoefficient(uint96 velocityCoefficient) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((velocityCoefficient)), _fieldLayout);
  }

  /**
   * @notice Get minFoodMass.
   */
  function getMinFoodMass() internal view returns (uint96 minFoodMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get minFoodMass.
   */
  function _getMinFoodMass() internal view returns (uint96 minFoodMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set minFoodMass.
   */
  function setMinFoodMass(uint96 minFoodMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((minFoodMass)), _fieldLayout);
  }

  /**
   * @notice Set minFoodMass.
   */
  function _setMinFoodMass(uint96 minFoodMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((minFoodMass)), _fieldLayout);
  }

  /**
   * @notice Get maxFoodMass.
   */
  function getMaxFoodMass() internal view returns (uint96 maxFoodMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get maxFoodMass.
   */
  function _getMaxFoodMass() internal view returns (uint96 maxFoodMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set maxFoodMass.
   */
  function setMaxFoodMass(uint96 maxFoodMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((maxFoodMass)), _fieldLayout);
  }

  /**
   * @notice Set maxFoodMass.
   */
  function _setMaxFoodMass(uint96 maxFoodMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((maxFoodMass)), _fieldLayout);
  }

  /**
   * @notice Get wallMass.
   */
  function getWallMass() internal view returns (uint96 wallMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get wallMass.
   */
  function _getWallMass() internal view returns (uint96 wallMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set wallMass.
   */
  function setWallMass(uint96 wallMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((wallMass)), _fieldLayout);
  }

  /**
   * @notice Set wallMass.
   */
  function _setWallMass(uint96 wallMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((wallMass)), _fieldLayout);
  }

  /**
   * @notice Get playerStartingMass.
   */
  function getPlayerStartingMass() internal view returns (uint96 playerStartingMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get playerStartingMass.
   */
  function _getPlayerStartingMass() internal view returns (uint96 playerStartingMass) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set playerStartingMass.
   */
  function setPlayerStartingMass(uint96 playerStartingMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((playerStartingMass)), _fieldLayout);
  }

  /**
   * @notice Set playerStartingMass.
   */
  function _setPlayerStartingMass(uint96 playerStartingMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((playerStartingMass)), _fieldLayout);
  }

  /**
   * @notice Get lineWidth.
   */
  function getLineWidth() internal view returns (uint128 lineWidth) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get lineWidth.
   */
  function _getLineWidth() internal view returns (uint128 lineWidth) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set lineWidth.
   */
  function setLineWidth(uint128 lineWidth) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((lineWidth)), _fieldLayout);
  }

  /**
   * @notice Set lineWidth.
   */
  function _setLineWidth(uint128 lineWidth) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((lineWidth)), _fieldLayout);
  }

  /**
   * @notice Get consumableSpawnGap.
   */
  function getConsumableSpawnGap() internal view returns (uint128 consumableSpawnGap) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get consumableSpawnGap.
   */
  function _getConsumableSpawnGap() internal view returns (uint128 consumableSpawnGap) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set consumableSpawnGap.
   */
  function setConsumableSpawnGap(uint128 consumableSpawnGap) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((consumableSpawnGap)), _fieldLayout);
  }

  /**
   * @notice Set consumableSpawnGap.
   */
  function _setConsumableSpawnGap(uint128 consumableSpawnGap) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((consumableSpawnGap)), _fieldLayout);
  }

  /**
   * @notice Get powerPelletEffectTime.
   */
  function getPowerPelletEffectTime() internal view returns (uint96 powerPelletEffectTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get powerPelletEffectTime.
   */
  function _getPowerPelletEffectTime() internal view returns (uint96 powerPelletEffectTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set powerPelletEffectTime.
   */
  function setPowerPelletEffectTime(uint96 powerPelletEffectTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((powerPelletEffectTime)), _fieldLayout);
  }

  /**
   * @notice Set powerPelletEffectTime.
   */
  function _setPowerPelletEffectTime(uint96 powerPelletEffectTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((powerPelletEffectTime)), _fieldLayout);
  }

  /**
   * @notice Get powerPelletSpawnOdds.
   */
  function getPowerPelletSpawnOdds() internal view returns (uint32 powerPelletSpawnOdds) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get powerPelletSpawnOdds.
   */
  function _getPowerPelletSpawnOdds() internal view returns (uint32 powerPelletSpawnOdds) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set powerPelletSpawnOdds.
   */
  function setPowerPelletSpawnOdds(uint32 powerPelletSpawnOdds) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((powerPelletSpawnOdds)), _fieldLayout);
  }

  /**
   * @notice Set powerPelletSpawnOdds.
   */
  function _setPowerPelletSpawnOdds(uint32 powerPelletSpawnOdds) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((powerPelletSpawnOdds)), _fieldLayout);
  }

  /**
   * @notice Get highScoreTopK.
   */
  function getHighScoreTopK() internal view returns (uint8 highScoreTopK) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get highScoreTopK.
   */
  function _getHighScoreTopK() internal view returns (uint8 highScoreTopK) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set highScoreTopK.
   */
  function setHighScoreTopK(uint8 highScoreTopK) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((highScoreTopK)), _fieldLayout);
  }

  /**
   * @notice Set highScoreTopK.
   */
  function _setHighScoreTopK(uint8 highScoreTopK) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((highScoreTopK)), _fieldLayout);
  }

  /**
   * @notice Get accessSigner.
   */
  function getAccessSigner() internal view returns (address accessSigner) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get accessSigner.
   */
  function _getAccessSigner() internal view returns (address accessSigner) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set accessSigner.
   */
  function setAccessSigner(address accessSigner) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((accessSigner)), _fieldLayout);
  }

  /**
   * @notice Set accessSigner.
   */
  function _setAccessSigner(address accessSigner) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((accessSigner)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (GameConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (GameConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint64 lineJumpDecayFactor,
    uint96 velocityCoefficient,
    uint96 minFoodMass,
    uint96 maxFoodMass,
    uint96 wallMass,
    uint96 playerStartingMass,
    uint128 lineWidth,
    uint128 consumableSpawnGap,
    uint96 powerPelletEffectTime,
    uint32 powerPelletSpawnOdds,
    uint8 highScoreTopK,
    address accessSigner
  ) internal {
    bytes memory _staticData = encodeStatic(
      lineJumpDecayFactor,
      velocityCoefficient,
      minFoodMass,
      maxFoodMass,
      wallMass,
      playerStartingMass,
      lineWidth,
      consumableSpawnGap,
      powerPelletEffectTime,
      powerPelletSpawnOdds,
      highScoreTopK,
      accessSigner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint64 lineJumpDecayFactor,
    uint96 velocityCoefficient,
    uint96 minFoodMass,
    uint96 maxFoodMass,
    uint96 wallMass,
    uint96 playerStartingMass,
    uint128 lineWidth,
    uint128 consumableSpawnGap,
    uint96 powerPelletEffectTime,
    uint32 powerPelletSpawnOdds,
    uint8 highScoreTopK,
    address accessSigner
  ) internal {
    bytes memory _staticData = encodeStatic(
      lineJumpDecayFactor,
      velocityCoefficient,
      minFoodMass,
      maxFoodMass,
      wallMass,
      playerStartingMass,
      lineWidth,
      consumableSpawnGap,
      powerPelletEffectTime,
      powerPelletSpawnOdds,
      highScoreTopK,
      accessSigner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(GameConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.lineJumpDecayFactor,
      _table.velocityCoefficient,
      _table.minFoodMass,
      _table.maxFoodMass,
      _table.wallMass,
      _table.playerStartingMass,
      _table.lineWidth,
      _table.consumableSpawnGap,
      _table.powerPelletEffectTime,
      _table.powerPelletSpawnOdds,
      _table.highScoreTopK,
      _table.accessSigner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(GameConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.lineJumpDecayFactor,
      _table.velocityCoefficient,
      _table.minFoodMass,
      _table.maxFoodMass,
      _table.wallMass,
      _table.playerStartingMass,
      _table.lineWidth,
      _table.consumableSpawnGap,
      _table.powerPelletEffectTime,
      _table.powerPelletSpawnOdds,
      _table.highScoreTopK,
      _table.accessSigner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint64 lineJumpDecayFactor,
      uint96 velocityCoefficient,
      uint96 minFoodMass,
      uint96 maxFoodMass,
      uint96 wallMass,
      uint96 playerStartingMass,
      uint128 lineWidth,
      uint128 consumableSpawnGap,
      uint96 powerPelletEffectTime,
      uint32 powerPelletSpawnOdds,
      uint8 highScoreTopK,
      address accessSigner
    )
  {
    lineJumpDecayFactor = (uint64(Bytes.getBytes8(_blob, 0)));

    velocityCoefficient = (uint96(Bytes.getBytes12(_blob, 8)));

    minFoodMass = (uint96(Bytes.getBytes12(_blob, 20)));

    maxFoodMass = (uint96(Bytes.getBytes12(_blob, 32)));

    wallMass = (uint96(Bytes.getBytes12(_blob, 44)));

    playerStartingMass = (uint96(Bytes.getBytes12(_blob, 56)));

    lineWidth = (uint128(Bytes.getBytes16(_blob, 68)));

    consumableSpawnGap = (uint128(Bytes.getBytes16(_blob, 84)));

    powerPelletEffectTime = (uint96(Bytes.getBytes12(_blob, 100)));

    powerPelletSpawnOdds = (uint32(Bytes.getBytes4(_blob, 112)));

    highScoreTopK = (uint8(Bytes.getBytes1(_blob, 116)));

    accessSigner = (address(Bytes.getBytes20(_blob, 117)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GameConfigData memory _table) {
    (
      _table.lineJumpDecayFactor,
      _table.velocityCoefficient,
      _table.minFoodMass,
      _table.maxFoodMass,
      _table.wallMass,
      _table.playerStartingMass,
      _table.lineWidth,
      _table.consumableSpawnGap,
      _table.powerPelletEffectTime,
      _table.powerPelletSpawnOdds,
      _table.highScoreTopK,
      _table.accessSigner
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint64 lineJumpDecayFactor,
    uint96 velocityCoefficient,
    uint96 minFoodMass,
    uint96 maxFoodMass,
    uint96 wallMass,
    uint96 playerStartingMass,
    uint128 lineWidth,
    uint128 consumableSpawnGap,
    uint96 powerPelletEffectTime,
    uint32 powerPelletSpawnOdds,
    uint8 highScoreTopK,
    address accessSigner
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        lineJumpDecayFactor,
        velocityCoefficient,
        minFoodMass,
        maxFoodMass,
        wallMass,
        playerStartingMass,
        lineWidth,
        consumableSpawnGap,
        powerPelletEffectTime,
        powerPelletSpawnOdds,
        highScoreTopK,
        accessSigner
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint64 lineJumpDecayFactor,
    uint96 velocityCoefficient,
    uint96 minFoodMass,
    uint96 maxFoodMass,
    uint96 wallMass,
    uint96 playerStartingMass,
    uint128 lineWidth,
    uint128 consumableSpawnGap,
    uint96 powerPelletEffectTime,
    uint32 powerPelletSpawnOdds,
    uint8 highScoreTopK,
    address accessSigner
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      lineJumpDecayFactor,
      velocityCoefficient,
      minFoodMass,
      maxFoodMass,
      wallMass,
      playerStartingMass,
      lineWidth,
      consumableSpawnGap,
      powerPelletEffectTime,
      powerPelletSpawnOdds,
      highScoreTopK,
      accessSigner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
