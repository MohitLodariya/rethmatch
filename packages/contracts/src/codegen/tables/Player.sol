// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct PlayerData {
  uint128 consumedMass;
  uint32 lastJumpBlockNumber;
  uint96 lastConsumedPowerPelletTime;
  uint256[] highScores;
}

library Player {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Player", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000506c6179657200000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0020030110040c00000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint160)
  Schema constant _keySchema = Schema.wrap(0x0014010013000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint128, uint32, uint96, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x002003010f030b81000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "consumedMass";
    fieldNames[1] = "lastJumpBlockNumber";
    fieldNames[2] = "lastConsumedPowerPelletTime";
    fieldNames[3] = "highScores";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get consumedMass.
   */
  function getConsumedMass(uint160 entityId) internal view returns (uint128 consumedMass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get consumedMass.
   */
  function _getConsumedMass(uint160 entityId) internal view returns (uint128 consumedMass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set consumedMass.
   */
  function setConsumedMass(uint160 entityId, uint128 consumedMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((consumedMass)), _fieldLayout);
  }

  /**
   * @notice Set consumedMass.
   */
  function _setConsumedMass(uint160 entityId, uint128 consumedMass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((consumedMass)), _fieldLayout);
  }

  /**
   * @notice Get lastJumpBlockNumber.
   */
  function getLastJumpBlockNumber(uint160 entityId) internal view returns (uint32 lastJumpBlockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get lastJumpBlockNumber.
   */
  function _getLastJumpBlockNumber(uint160 entityId) internal view returns (uint32 lastJumpBlockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set lastJumpBlockNumber.
   */
  function setLastJumpBlockNumber(uint160 entityId, uint32 lastJumpBlockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastJumpBlockNumber)), _fieldLayout);
  }

  /**
   * @notice Set lastJumpBlockNumber.
   */
  function _setLastJumpBlockNumber(uint160 entityId, uint32 lastJumpBlockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastJumpBlockNumber)), _fieldLayout);
  }

  /**
   * @notice Get lastConsumedPowerPelletTime.
   */
  function getLastConsumedPowerPelletTime(uint160 entityId) internal view returns (uint96 lastConsumedPowerPelletTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get lastConsumedPowerPelletTime.
   */
  function _getLastConsumedPowerPelletTime(
    uint160 entityId
  ) internal view returns (uint96 lastConsumedPowerPelletTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set lastConsumedPowerPelletTime.
   */
  function setLastConsumedPowerPelletTime(uint160 entityId, uint96 lastConsumedPowerPelletTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastConsumedPowerPelletTime)), _fieldLayout);
  }

  /**
   * @notice Set lastConsumedPowerPelletTime.
   */
  function _setLastConsumedPowerPelletTime(uint160 entityId, uint96 lastConsumedPowerPelletTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastConsumedPowerPelletTime)), _fieldLayout);
  }

  /**
   * @notice Get highScores.
   */
  function getHighScores(uint160 entityId) internal view returns (uint256[] memory highScores) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get highScores.
   */
  function _getHighScores(uint160 entityId) internal view returns (uint256[] memory highScores) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set highScores.
   */
  function setHighScores(uint160 entityId, uint256[] memory highScores) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((highScores)));
  }

  /**
   * @notice Set highScores.
   */
  function _setHighScores(uint160 entityId, uint256[] memory highScores) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((highScores)));
  }

  /**
   * @notice Get the length of highScores.
   */
  function lengthHighScores(uint160 entityId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of highScores.
   */
  function _lengthHighScores(uint160 entityId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of highScores.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemHighScores(uint160 entityId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of highScores.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemHighScores(uint160 entityId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to highScores.
   */
  function pushHighScores(uint160 entityId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to highScores.
   */
  function _pushHighScores(uint160 entityId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from highScores.
   */
  function popHighScores(uint160 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from highScores.
   */
  function _popHighScores(uint160 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of highScores at `_index`.
   */
  function updateHighScores(uint160 entityId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of highScores at `_index`.
   */
  function _updateHighScores(uint160 entityId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint160 entityId) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint160 entityId) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint160 entityId,
    uint128 consumedMass,
    uint32 lastJumpBlockNumber,
    uint96 lastConsumedPowerPelletTime,
    uint256[] memory highScores
  ) internal {
    bytes memory _staticData = encodeStatic(consumedMass, lastJumpBlockNumber, lastConsumedPowerPelletTime);

    EncodedLengths _encodedLengths = encodeLengths(highScores);
    bytes memory _dynamicData = encodeDynamic(highScores);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint160 entityId,
    uint128 consumedMass,
    uint32 lastJumpBlockNumber,
    uint96 lastConsumedPowerPelletTime,
    uint256[] memory highScores
  ) internal {
    bytes memory _staticData = encodeStatic(consumedMass, lastJumpBlockNumber, lastConsumedPowerPelletTime);

    EncodedLengths _encodedLengths = encodeLengths(highScores);
    bytes memory _dynamicData = encodeDynamic(highScores);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint160 entityId, PlayerData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.consumedMass,
      _table.lastJumpBlockNumber,
      _table.lastConsumedPowerPelletTime
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.highScores);
    bytes memory _dynamicData = encodeDynamic(_table.highScores);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint160 entityId, PlayerData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.consumedMass,
      _table.lastJumpBlockNumber,
      _table.lastConsumedPowerPelletTime
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.highScores);
    bytes memory _dynamicData = encodeDynamic(_table.highScores);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint128 consumedMass, uint32 lastJumpBlockNumber, uint96 lastConsumedPowerPelletTime) {
    consumedMass = (uint128(Bytes.getBytes16(_blob, 0)));

    lastJumpBlockNumber = (uint32(Bytes.getBytes4(_blob, 16)));

    lastConsumedPowerPelletTime = (uint96(Bytes.getBytes12(_blob, 20)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory highScores) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    highScores = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (PlayerData memory _table) {
    (_table.consumedMass, _table.lastJumpBlockNumber, _table.lastConsumedPowerPelletTime) = decodeStatic(_staticData);

    (_table.highScores) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint160 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint160 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint128 consumedMass,
    uint32 lastJumpBlockNumber,
    uint96 lastConsumedPowerPelletTime
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(consumedMass, lastJumpBlockNumber, lastConsumedPowerPelletTime);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[] memory highScores) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(highScores.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[] memory highScores) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((highScores)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint128 consumedMass,
    uint32 lastJumpBlockNumber,
    uint96 lastConsumedPowerPelletTime,
    uint256[] memory highScores
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(consumedMass, lastJumpBlockNumber, lastConsumedPowerPelletTime);

    EncodedLengths _encodedLengths = encodeLengths(highScores);
    bytes memory _dynamicData = encodeDynamic(highScores);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint160 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    return _keyTuple;
  }
}
