// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EntityType } from "../common.sol";

struct EntityData {
  EntityType etype;
  uint128 mass;
  int128 velMultiplier;
  uint32 lineId;
  uint128 lastX;
  uint96 lastTouchedTime;
  uint160 leftNeighbor;
  uint160 rightNeighbor;
}

library Entity {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Entity", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000456e7469747900000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0069080001101004100c14140000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint160)
  Schema constant _keySchema = Schema.wrap(0x0014010013000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint128, int128, uint32, uint128, uint96, uint160, uint160)
  Schema constant _valueSchema = Schema.wrap(0x00690800000f2f030f0b13130000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entityId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "etype";
    fieldNames[1] = "mass";
    fieldNames[2] = "velMultiplier";
    fieldNames[3] = "lineId";
    fieldNames[4] = "lastX";
    fieldNames[5] = "lastTouchedTime";
    fieldNames[6] = "leftNeighbor";
    fieldNames[7] = "rightNeighbor";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get etype.
   */
  function getEtype(uint160 entityId) internal view returns (EntityType etype) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EntityType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get etype.
   */
  function _getEtype(uint160 entityId) internal view returns (EntityType etype) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EntityType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set etype.
   */
  function setEtype(uint160 entityId, EntityType etype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(etype)), _fieldLayout);
  }

  /**
   * @notice Set etype.
   */
  function _setEtype(uint160 entityId, EntityType etype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(etype)), _fieldLayout);
  }

  /**
   * @notice Get mass.
   */
  function getMass(uint160 entityId) internal view returns (uint128 mass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get mass.
   */
  function _getMass(uint160 entityId) internal view returns (uint128 mass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set mass.
   */
  function setMass(uint160 entityId, uint128 mass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((mass)), _fieldLayout);
  }

  /**
   * @notice Set mass.
   */
  function _setMass(uint160 entityId, uint128 mass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((mass)), _fieldLayout);
  }

  /**
   * @notice Get velMultiplier.
   */
  function getVelMultiplier(uint160 entityId) internal view returns (int128 velMultiplier) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int128(uint128(bytes16(_blob))));
  }

  /**
   * @notice Get velMultiplier.
   */
  function _getVelMultiplier(uint160 entityId) internal view returns (int128 velMultiplier) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int128(uint128(bytes16(_blob))));
  }

  /**
   * @notice Set velMultiplier.
   */
  function setVelMultiplier(uint160 entityId, int128 velMultiplier) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((velMultiplier)), _fieldLayout);
  }

  /**
   * @notice Set velMultiplier.
   */
  function _setVelMultiplier(uint160 entityId, int128 velMultiplier) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((velMultiplier)), _fieldLayout);
  }

  /**
   * @notice Get lineId.
   */
  function getLineId(uint160 entityId) internal view returns (uint32 lineId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get lineId.
   */
  function _getLineId(uint160 entityId) internal view returns (uint32 lineId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set lineId.
   */
  function setLineId(uint160 entityId, uint32 lineId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((lineId)), _fieldLayout);
  }

  /**
   * @notice Set lineId.
   */
  function _setLineId(uint160 entityId, uint32 lineId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((lineId)), _fieldLayout);
  }

  /**
   * @notice Get lastX.
   */
  function getLastX(uint160 entityId) internal view returns (uint128 lastX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Get lastX.
   */
  function _getLastX(uint160 entityId) internal view returns (uint128 lastX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint128(bytes16(_blob)));
  }

  /**
   * @notice Set lastX.
   */
  function setLastX(uint160 entityId, uint128 lastX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastX)), _fieldLayout);
  }

  /**
   * @notice Set lastX.
   */
  function _setLastX(uint160 entityId, uint128 lastX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lastX)), _fieldLayout);
  }

  /**
   * @notice Get lastTouchedTime.
   */
  function getLastTouchedTime(uint160 entityId) internal view returns (uint96 lastTouchedTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Get lastTouchedTime.
   */
  function _getLastTouchedTime(uint160 entityId) internal view returns (uint96 lastTouchedTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint96(bytes12(_blob)));
  }

  /**
   * @notice Set lastTouchedTime.
   */
  function setLastTouchedTime(uint160 entityId, uint96 lastTouchedTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((lastTouchedTime)), _fieldLayout);
  }

  /**
   * @notice Set lastTouchedTime.
   */
  function _setLastTouchedTime(uint160 entityId, uint96 lastTouchedTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((lastTouchedTime)), _fieldLayout);
  }

  /**
   * @notice Get leftNeighbor.
   */
  function getLeftNeighbor(uint160 entityId) internal view returns (uint160 leftNeighbor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint160(bytes20(_blob)));
  }

  /**
   * @notice Get leftNeighbor.
   */
  function _getLeftNeighbor(uint160 entityId) internal view returns (uint160 leftNeighbor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint160(bytes20(_blob)));
  }

  /**
   * @notice Set leftNeighbor.
   */
  function setLeftNeighbor(uint160 entityId, uint160 leftNeighbor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((leftNeighbor)), _fieldLayout);
  }

  /**
   * @notice Set leftNeighbor.
   */
  function _setLeftNeighbor(uint160 entityId, uint160 leftNeighbor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((leftNeighbor)), _fieldLayout);
  }

  /**
   * @notice Get rightNeighbor.
   */
  function getRightNeighbor(uint160 entityId) internal view returns (uint160 rightNeighbor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint160(bytes20(_blob)));
  }

  /**
   * @notice Get rightNeighbor.
   */
  function _getRightNeighbor(uint160 entityId) internal view returns (uint160 rightNeighbor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint160(bytes20(_blob)));
  }

  /**
   * @notice Set rightNeighbor.
   */
  function setRightNeighbor(uint160 entityId, uint160 rightNeighbor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((rightNeighbor)), _fieldLayout);
  }

  /**
   * @notice Set rightNeighbor.
   */
  function _setRightNeighbor(uint160 entityId, uint160 rightNeighbor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((rightNeighbor)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint160 entityId) internal view returns (EntityData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint160 entityId) internal view returns (EntityData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint160 entityId,
    EntityType etype,
    uint128 mass,
    int128 velMultiplier,
    uint32 lineId,
    uint128 lastX,
    uint96 lastTouchedTime,
    uint160 leftNeighbor,
    uint160 rightNeighbor
  ) internal {
    bytes memory _staticData = encodeStatic(
      etype,
      mass,
      velMultiplier,
      lineId,
      lastX,
      lastTouchedTime,
      leftNeighbor,
      rightNeighbor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint160 entityId,
    EntityType etype,
    uint128 mass,
    int128 velMultiplier,
    uint32 lineId,
    uint128 lastX,
    uint96 lastTouchedTime,
    uint160 leftNeighbor,
    uint160 rightNeighbor
  ) internal {
    bytes memory _staticData = encodeStatic(
      etype,
      mass,
      velMultiplier,
      lineId,
      lastX,
      lastTouchedTime,
      leftNeighbor,
      rightNeighbor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint160 entityId, EntityData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.etype,
      _table.mass,
      _table.velMultiplier,
      _table.lineId,
      _table.lastX,
      _table.lastTouchedTime,
      _table.leftNeighbor,
      _table.rightNeighbor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint160 entityId, EntityData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.etype,
      _table.mass,
      _table.velMultiplier,
      _table.lineId,
      _table.lastX,
      _table.lastTouchedTime,
      _table.leftNeighbor,
      _table.rightNeighbor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      EntityType etype,
      uint128 mass,
      int128 velMultiplier,
      uint32 lineId,
      uint128 lastX,
      uint96 lastTouchedTime,
      uint160 leftNeighbor,
      uint160 rightNeighbor
    )
  {
    etype = EntityType(uint8(Bytes.getBytes1(_blob, 0)));

    mass = (uint128(Bytes.getBytes16(_blob, 1)));

    velMultiplier = (int128(uint128(Bytes.getBytes16(_blob, 17))));

    lineId = (uint32(Bytes.getBytes4(_blob, 33)));

    lastX = (uint128(Bytes.getBytes16(_blob, 37)));

    lastTouchedTime = (uint96(Bytes.getBytes12(_blob, 53)));

    leftNeighbor = (uint160(Bytes.getBytes20(_blob, 65)));

    rightNeighbor = (uint160(Bytes.getBytes20(_blob, 85)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (EntityData memory _table) {
    (
      _table.etype,
      _table.mass,
      _table.velMultiplier,
      _table.lineId,
      _table.lastX,
      _table.lastTouchedTime,
      _table.leftNeighbor,
      _table.rightNeighbor
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint160 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint160 entityId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    EntityType etype,
    uint128 mass,
    int128 velMultiplier,
    uint32 lineId,
    uint128 lastX,
    uint96 lastTouchedTime,
    uint160 leftNeighbor,
    uint160 rightNeighbor
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(etype, mass, velMultiplier, lineId, lastX, lastTouchedTime, leftNeighbor, rightNeighbor);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    EntityType etype,
    uint128 mass,
    int128 velMultiplier,
    uint32 lineId,
    uint128 lastX,
    uint96 lastTouchedTime,
    uint160 leftNeighbor,
    uint160 rightNeighbor
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      etype,
      mass,
      velMultiplier,
      lineId,
      lastX,
      lastTouchedTime,
      leftNeighbor,
      rightNeighbor
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint160 entityId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(entityId));

    return _keyTuple;
  }
}
